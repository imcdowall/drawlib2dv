
 Create a Picture object
 DRAWLIB.createPicture creates a picture object associated with a canvas
 that owns a list of drawing items and supports panning, zooming and
 rotation.

 @param canvas The canvas object on which to draw
 @param background Background color - string '#RRGGBB'
 @param canvasWidth Initial width in pixels of the canvas
 @param canvasHeight Initial height in pixels of the canvas
 @return Picture object
 
==========

 pic.getCtxt returns the canvas drawing context

 @return drawing context
 
==========

 pic.getCanvasWidth returns the width of the main canvas for drawing

 @return drawing canvas width
 
==========

 pic.getWindow returns the current window

 @return drawing window
 
==========

 pic.setRedrawFunc sets a function callback to be used in place of
 redrawall. It is optional.

 @param func A function that can be called with parameters pic, ctxt, canvas, window
 
==========

 pic.deleteItem deletes an item from the drawing list.

 @param id id of the item to be deleted.
 
==========

 pic.getItemById returns an item based on the local id

 @param id Local id of the item
 @return the item, or undef
 
==========

 pic.Pick finds an item, if any at a page point

 @param pX X co-ordinate of the pick point
 @param pY Y co-ordinate of the pick point
 @return the picked item, or undef if none found.
 
==========

 pic.checkPickItem take a page point and an item and checks if it would be
 picked.

 @param pX X co-ordinate of the pick point
 @param pY Y co-ordinate of the pick point
 @param item The item being checked
 @return true if the point matches the item.
 
==========

 pic.contained is given a rectangle on the page and returns a list of
 items contained within the rectangle, if any.

 @param layer The layer on which to find items
 @param x1 One X limit of the rectangle
 @param y1 One Y limit of the rectangle
 @param x2 One X limit of the rectangle
 @param y2 One Y limit of the rectangle
 @return list of contained items (empty if none)
 
==========

 pic.getMinZ returns the minimum Z value for any item.

 @return Z
 
==========

 pic.getMaxZ returns the maximum Z value for any item.

 @return Z
 
==========

 pic.setZ informs the pic that a Z value has been used and allows it to
 update its minimum and maximum Z values.

 @param zVal Z value that has been applied.
 
==========

 pic.getItemByDBId returns the item with the given store id.

 @param dbId Store id of the desired item
 @return relevant item (or undef if none)
 
==========

 pic.completeGroups is called when creating a picture from stored information.
 It causes all groups containing items from store to be completed.
 
==========

 pic.setLayerVisibility sets the visibility for all items on a layer.
 By default all items are visible.

 @param layer The layer number affected
 @param visible The visibility value
 
==========

 pic.setLayerPickable sets the pickability for all items on a layer.
 By default, all items are pickable.

 @param layer The layer number affected
 @param visible The pickability value
 
==========

 pic.setLayerZOffset applies a Z offset to all items in a layer.
 Unfortunately, this might repeat through storage so use with care.

 @param layer The layer number affected
 @param zOffset The Z offset to apply
 
==========

 pic.pageToCanvasCoords converts page co-ordinates to canvas co-ordinates

 @param pX X co-ordinates on the page
 @param pY Y co-ordinate on the page
 @return 2-element array of X and Y canvas co-ordinates.
 
==========

 pic.pageToWindowCoords converts page co-ordinates to window co-ordinates

 @param pX X co-ordinates on the page
 @param pY Y co-ordinate on the page
 @return 2-element array of X and Y window co-ordinates.
 
==========

 pic.canvasToWindowRect converts canvas co-ordinates to window co-ordinates

 @param xMin Min X co-ord
 @param yMin Min Y co-ord
 @param xMax Max X co-ord
 @param yMax Max Y co-ord

 @return 4-element array in window coords [minX, minY, maxX, maxY]
 
==========
pic.canvasToWindowOffset converts an X and Y offset from canvas into
 window co-ordinates.

 @param pX X co-ordinate of the offset
 @param pY Y co-ordinate of the offset
 @return 2-element array with X and Y co-ordinates of the offset
 
==========

 pic.windowToCanvasScale returns a scale factor to go between window
 co-ordinates and canvas co-ordinates.

 @return scale factor
 
==========

 pic.windowToCanvasCoords is given X and Y co-ordinates in
 window co-ordinates and returns them in canvas co-ordinates.

 @param wX X co-ordinate
 @param wY Y co-ordinate
 @return 2 element array, X, Y in canvas co-ords
 
==========

 pic.windowToCanvasRect is given min and maxc X and Y co-ordinates in
 window co-ordinates and returns them in canvas co-ordinates.

 @param wXMin Minimum X co-ordinate
 @param wYMin Minimum Y co-ordinate
 @param wXMax Maximum X co-ordinate
 @param wYMax Maximum Y co-ordinate
 @return 4 element array, min X, min Y, max X, max Y in canvas co-ords
 
==========

 pic.windowToCanvasArray converts a list of co-ordinates from window to
 canvas co-ordinates.

 @param wP list of 2-element arrays, each containing X and Y co-ordinates
 @return list of 2-element arrays, each containing X and Y co-ordinates
 
==========

 pic.pageToWindowDistance converts a page or canvas distance into window units

 @param canvasDistance Distance in page or canvas units
 @return distance in window units
 
==========

 pic.pageToAnyCanvasWindowCoords takes a page point and a supplied canvas and
 converts the location to a window co-ordinate, assuming that the whole
 picture is drawn in the canvas.

 @param pX Page X Co-ord
 @param pY Page Y Co-ord
 @param canvas Supplied canvas

 @return 2-element array X and Y Window point.
 
==========

 pic.getRotation returns the current picture rotation.

 @return rotation clockwise in units of 90 degrees
 
==========

 pic.setRotation rotates the window relative to the canvas.

 @param rotation is the position to rotate clockwise in units of 90 degrees
 
==========

 pic.setWindow sets how much of the window is shown in the canvas.
 It allows panning and zooming. The amount shown may be increased,
 if necessary, to avoid skewing.

 @param minX Minimum X co-ordinate
 @param minY Minimum Y co-ordinate
 @param width Window width
 @param height Window height
 
==========

 pic.setWindowWithResize sets how much of the window is shown in the canvas.
 It allows panning and zooming. The amount shown may be increased,
 if necessary, to avoid skewing.
 It may shrink the canvas to show more without skewing.

 @param minX Minimum X co-ordinate
 @param minY Minimum Y co-ordinate
 @param width Window width
 @param height Window height
 
==========

 pic.setWindowBoundary sets the maximum dimensions of the window.
 Once this is set, zooming or panning cannot move beyond these boundaries.
 If the window boundary is not set then zooming or panning are not
 constrained.

 @param minX Minimum X co-ordinate
 @param minY Minimum Y co-ordinate
 @param width Window width
 @param height Window height
 
==========

 pic.getWindowBoundary returns the maximum dimensions of the window.

 return undefined or a 4 element array, min X, min Y, width, height
 
==========

 pic.resetCanvasDimensions sets the canvas size and page.
 It should be called initially and whenever the browser window is re-sized.
 It appears to work better when the canvas is placed absolutely.
 
==========

 pic.zoomIn shrinks the current window. It halves the width and height
 while keeping the centre point.
 
==========

 pic.zoomout expands the current window. It doubles the width and height
 while trying to keep the centre point. However, the window dimensions and
 centre may be constrained if a window boundary has been set.
 
==========

 pic.pan moves the window centre while leaving the width and height
 unchanged.
 The new dimensions may be constrained if a window boundary has been set.

 @param direction The direction to pan in:
 0 = pan right
 1 = pan down
 2 = pan left
 3 = pan up
 
==========

 pic.panRight pans the picture to the right within the window boundaries.
 
==========

 pic.panLeft pans the picture to the left within the window boundaries.
 
==========

 pic.panup pans the picture upwards within the window boundaries.
 
==========

 pic.panDown pans the picture downwards within the window boundaries.
 
==========

 pic.panToCentre pans the picture to have a specified centre.
 This may be moved to keep within the window boundary

 @param midX X co-ord of new centre
 @param midY Y co-ord of new centre
 
==========

 pic.redrawAll redraws the picture in the main canvas
 
==========

 pic.redrawAllToCanvas redraws the picture in a supplied canvas
 
==========

 pic.redrawAllToImageWindow redraws the picture to a new browser window
 
==========

 pic.blank blanks the canvas window and doesn't draw any layers.

 @param ctxt Drawing context
 @param canvasWidth Width of canvas
 @param canvasHeight Height of canvas
 
==========

 pic.blankCanvasRect blanks a rectangle on the canvas.
 @param xMin Minimum X co-ord
 @param xMax Maximum X co-ord
 @param yMin Minimum Y co-ord
 @param yMax Maximum Y co-ord
 
==========

 pic.redrawFrame draws a frame arpound the supplied context

 @param ctxt Drawing context
 @param canvasWidth width of canvas
 @param window window
 
==========

 pic.redrawLayer redraws one layer in the supplied context.
 Nothing is blanked first.

 @param layer The layer to redraw.
 
==========

 pic.redrawSectionWindowLayer redraws a section of one layer in the
 main canvas.
 It chooses what to redraw based on a list of bounding boxes and it returns
 the list with the bounding boxes of any items drawn.

 @param layer Number of the layer to draw
 @param BBList Array of bounding boxes (minX, minY, maxX, MaxY)
 @return updated array with more bounding boxes
 
==========

 pic.redrawSectionPage redraws a section of the picture in the main canvas

 @param minX Minimum X of section in page co-ordinates
 @param minY Minimum Y of section in page co-ordinates
 @param maxX Maximum X of section in page co-ordinates
 @param maxY Maximum Y of section in page co-ordinates
 
==========

 item.blankOffset blanks an area based on an offset of the item's
 bounding box. It returns the area blanked in window co-ords.

 @param xOff - X offset in canvas co-ords
 @param yOff - Y offset in canvas co-ords

 @return 4 element array, [minX, minY, maxX, maxY]
 
==========

 pic.drawDragRect draws a rectangle being dragged.
 It is called repeatedly and blanks the previous rectangle.

 @param x1 X co-ordinate of one rectangle corner
 @param y1 Y co-ordinate of one rectangle corner
 @param oldX2 X co-ordinate of previous other rectangle corner
 @param oldY2 Y co-ordinate of previous other rectangle corner
 @param newX2 X co-ordinate of new other rectangle corner
 @param newY2 Y co-ordinate of new other rectangle corner
 
==========

 pic.drawPageRect draws a rectangle in page co-ordinates

 @param x1 X co-ordinate of one rectangle corner
 @param y1 Y co-ordinate of one rectangle corner
 @param x2 X co-ordinate of other rectangle corner
 @param y2 Y co-ordinate of other rectangle corner
 
==========

 pic.drawDragEllipse draws an ellipse being dragged.
 It is called repeatedly and blanks the previous rectangle.

 @param x1 X co-ordinate of one rectangle corner
 @param y1 Y co-ordinate of one rectangle corner
 @param oldX2 X co-ordinate of previous other rectangle corner
 @param oldY2 Y co-ordinate of previous other rectangle corner
 @param newX2 X co-ordinate of new other rectangle corner
 @param newY2 Y co-ordinate of new other rectangle corner
 
==========

 pic.drawPageLine draws a line between points in page co-ordinates.

 @param x1 X co-ordinate of the first point
 @param y1 Y co-ordinate of the first point
 @param x2 X co-ordinate of the second point
 @param y2 Y co-ordinate of the second point
 
==========

 pic.drawPoint draws a small mark at a point in window co-ordinates.

 @param winX Point X co-ordinate
 @param winY Point Y co-ordinate
 
==========

 pic.createItemFromJSON is given a parsed JSON version of an item and
 recreates it.

 @param data The parsed JSON for the item.
 @param id The item id
 
==========

 item.getType returns a string that denotes the type of graphic item.

 @return string with the type of item, such as 'R', 'G or 'F'
 
==========

 item.getId returns the local id for an item.

 @return local id
 
==========

 item.getDbId returns the database id for an item. DRAWLIB does nothing with
 this but it can be used for external storage purposes.

 @return dbId Database (or other) id
 
==========

 item.setDbId sets the database id for an item. DRAWLIB does nothing with
 this but it can be used for external storage purposes.

 @param dbId Database (or other) id
 
==========

 item.getZ returns the Z value for an item.

 @return the Z value
 
==========

 item.setZ sets the Z value for an item.
 Items with a higher Z value are drawn in front of items with lower Z value.

 @param z The Z value to set
 
==========

 item.getLayer returns the drawing layer for an item.
 Layers can be used to set whether items are visible or pickable.

 @return the layer number
 
==========

 item.setLayer sets the layer number for an item.
 Items are created on layer 0 by default.

 @param layer The layer number
 
==========

 item.setDrag sets a dragging flag on an item. An item with this
 flag set will not be drawn.

 @param drag true or false
 
==========

 item.getMid returns the window position of the centre of an item.

 @return 2-element array with X and Y values
 
==========

 item.setMid sets the window position of the centre of an item.

 @param x X position of the centre
 @param y Y position of the centre
 
==========

 item.setNeverPickable sets an item as never pickable.
 
==========

 item.setPickable sets an item as pickable or not.

 @param pickable Should the item be pickable
 
==========

 pic.createGroupFromDB creates a group from a set of storage ids.

 @param id Local identifier
 @param memberIds Array of member identifiers
 @return Newly created group
 
==========

 pic.createGroupFromPic creates a group from a set of local ids.

 @param id Local identifier
 @param members Array of member items
 @return Newly created group
 
==========

 group.setGroupMembersFromDBId is called for a group created with a set of
 storage ids. Once all the members have been created, it sets the members
 list from the storage ids.
 
==========

 pic.createRect creates a rectangle drawing item and adds it to the drawing
 item list. The rectangle is created with default styles and on layer 0.

 @param id Item identifier
 @param x X co-ordinate of the centre point
 @param y Y co-ordinate of the centre point
 @param p_winWidth Width of the rectangle in window units
 @param p_winHeight Height of the rectangle in window units
 @return the created item
 
==========

 item.getLineStyle returns the item linestyle.

 @return line style
 
==========

 item.setLineStyle sets the line style for the item. The style should be
 an HTML color.

 @param lineStyle The style to set.
 
==========

 item.getLineStyle returns the item linestyle.

 @return line style
 
==========

 item.setFillStyle sets the fill style for the item. The style should be
 an HTML color.

 @param fillStyle The style to set.
 
==========

 item.getLineStyle returns the item linestyle.

 @return line style
 
==========

 item.setLineWidth sets the line width style for the item.

 @param lineWidth The line width to set
 
==========

 item.getGroup returns the group, if any for an item.
 An item can belong to no more than one group at a time.

 @return The group that an item is in, or undef.
 
==========

 item.setGroup sets the group for an item.

 @param group The group to set.
 
==========

 item.setBoxes recalculates the bounding boxes for an item.
 These are used when picking or redrawing items.
 
==========

 item.getBB returns a bounding box

 @return 4-element array - minX, minY, maxX, maxY
 
==========

 item.getBorder returns an array of border points

 @return 5-element of 2-element arrays in window co-ords.
 
==========

 item.getWidth returns the width in window units

 @return width
 
==========

 item.setWidth sets the width in window units

 @param width
 
==========

 item.getHeight returns the height in window units

 @return height
 
==========

 item.setHeight sets the height in window units

 @param height
 
==========

 item.getRadAngle returns the angle of rotation in Radians

 @return angle
 
==========

 item.getAngle returns the angle of rotation in degrees

 @return angle
 
==========

 item.setAngle sets the angle of rotation for an item in degrees clockwise.
 The bounding boxes are recalculated.

 @param angle The angle to set in degrees.
 
==========

 item.offset moves the item by an X and Y amount.
 The bounding boxes are recalculated.

 @param xOffset The X offset to apply
 @param yOffset The Y offset to apply
 
==========

 item.highlight draws the item with a highlight for emphasis.
 The highlight is not retained when the picture is redrawn.
 The style should be an HTML color.

 @param style The linestyle with which to draw the highlight.
 
==========

 item.drawHandles draws small 'handles' on the corners and middles of sides.
 These can then be grabbed and dragged to re-size the item.
 For the convenience of the caller, the positions of the handles are
 returned in canvas co-ords.

 @param style The linestyle to use to draw the handles.
 @param hWid The width of the handles to draw, in canvas co-ordinates
 @return an array of 2-element array points - in order:
 top Left corner
 top right corner
 bottom right corner
 bottom left corner
 left middle side
 top middle side
 right middle corner
 bottom middle corner
 For items that cannot be skewed only the first four points are returned.
 
==========

 item.drawOffset draws an item with an offset in canvas co-ordinates.
 This can be used when dragging an item.
 The item is not permanently affected.
 The method is designed to be called repeatedly as an item is dragged.
 The offset distances are in canvas co-ordinates

 @param oldXOff The previous X offset
 @param oldYOff The previous Y offset
 @param xOff X offset
 @param yOff Y offset
 @param blank true if the previous position should be cleared
 
==========

 item.drawStretch draws an item that is stretched in some way.
 The handle is an identifier for the handle that is being dragged.
 0 to 3 are corner handles, 4 to 7 are mid side handles
 The offset distances are in canvas co-ordinates
 This can be used when dragging an item.
 The item is not permanently affected
 The method is designed to be called repeatedly as an item is stretched.

 @see item.drawHandles
 @param handle the handle that has been dragged
 @param oldXOff The previous X offset
 @param oldYOff The previous Y offset
 @param xOff X offset
 @param yOff Y offset
 @param blank true if the previous position should be cleared
 
==========

 item.stretch changes the dimensions of an item when a 'handle' has been
 dragged.
 The offsets are in canvas co-ords

 @see item.drawHandles
 @param handle the handle that has been dragged
 @param xOff X offset
 @param yOff Y offset
 
==========

 item.pick checks if a given point in window co-ordinates lies
 on the item.

 @param x X co-ord
 @param y Y co-ord

 @return true for a hit, otherrwise false
 
==========

 pic.createEllipse creates an ellipse drawing item and adds it to the drawing
 item list. The ellipse is created with default styles and on layer 0.
 At present, the ellipse has to be a circle.

 @param id Item identifier
 @param x X co-ordinate of the centre point
 @param y Y co-ordinate of the centre point
 @param winradius radius of the ellipse
 @return the created item
 
==========

 item.getRadius returns the radius of an item

 @return radius
 
==========

 item.setRadius sets the radius of an item

 @param radius
 
==========

 pic.creatText creates a text drawing item and adds it to the drawing
 item list. The text is created with default styles and on layer 0.
 If the item has a line style or fill style set then it will be drawn
 within a box.
 The body text can be multi-line.

 @param id Item identifier
 @param x X co-ordinate of the centre point
 @param y Y co-ordinate of the centre point
 @param bodyText Text to be drawn
 @param angle Rotation clockwise in degrees
 @param fontSize Vertical size of the text in window co-ordinates
 @return the created item
 
==========

 item.getText returns the text of an item

 @return text as a string
 
==========
item.setText sets the text of an item

 @param text as a string
 
==========

 item.getFontStyle returns the current font style

 @return font style
 
==========

 item.setFontStyle sets the style to be used for text for text based items.
 The fontStyle should be an HTML color.

 @param fontStyle The style for the text
 
==========

 item.getFontFamily returns the font family.

 @return Font family
 
==========

 item.setFontFamily sets the font family for text based items.

 @param fontFamily The font family for the text.
 
==========

 item.getFontSize returns the text size

 @return Text size in window units
 
==========

 item.setFontSize sets the vertical text size for text based items.

 @param fontSize Text size in window units.
 
==========

 item.getFontColorStyle returns the text color.

 @return color style for the text
 
==========

 item.setFontColorStyle sets the color style to be used for text for text
 based items.
 The fontStyle should be an HTML color.

 @param fontColorStyle The style for the text
 
==========

 item.setTextBaseline sets the text vertical alignment.
 This library only supports 'top', middle' or 'bottom'
 
==========

 pic.createImage creates an image based drawing item and adds it to the
 drawing item list.
 The image is created on layer 0.

 @param id Item identifier
 @param p_imgName The URL of the image to use
 @param x X co-ordinate of the centre point
 @param y Y co-ordinate of the centre point
 @param winWidth Width of the rectangle in window units
 @param winHeight Height of the rectangle in window units
 @param angle the rotation clockwise in degrees
 @return the created item
 
==========

 pic.createPolyline creates a multi line segment drawing item and adds it
 to the drawing item list. The line is created with default styles and on
 layer 0.

 @param id Item identifier
 @param points Array of 2-element points
 @return the created item
 
==========

 item.getSubType returns the sub-type. This is only defined for items
 derived from polylines. The current values are 'PL' for polyline,
 'F' for freehand and 'PG' for polygon.

 @return item sub type
 
==========

 item.setArrows sets the length of arrow heads for a line.

 @param arrow1 - length of arrow head at start of line
 @param arrow2 - length of arrow head at end of line
 
==========

 item.getArrows returns a 2-element array with the sizes of arrow heads
 
==========

 pic.createFreehand creates a multi line segment drawing item based on a
 freehand line with short line segments and adds it
 to the drawing item list. The line is created with default styles and on
 layer 0.

 @param id Item identifier
 @param points Array of 2-element points
 @return the created item
 
==========

 pic.createPolygon creates a polygon drawing item and adds it
 to the drawing item list. The polygon is created with default styles and on
 layer 0.

 @param id Item identifier
 @param points Array of 2-element points
 @param fillStyle The style to fill the polygon - should be an HTML color
 @return the created item
 
==========
