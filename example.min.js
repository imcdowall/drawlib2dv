//Copyright (c) 2009-2011, Ian McDowall
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without 
//modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
// For JSHint
/*jshint strict:false, nonstandard:true*/
/*global DRAWLIB:false,alert:false */
var DRAWAPP = {'nextItemId':0};

// Is a modal dialog present
DRAWAPP.modalDialog = false;
DRAWAPP.shownDiv = '';

function getIntVal( fieldId, defaultVal ) {
    var retVal = defaultVal;
    try { var valVal = parseInt(document.getElementById(fieldId).value, 10);
        if (!isNaN(valVal)) { retVal = valVal;}
        }
    catch(e) { retVal = defaultVal; } // Ignore failure
    return retVal;
    }

function onResize() {
    var canvasHeight = window.innerHeight - 60;
    var canvasWidth = window.innerWidth - 320;
    DRAWAPP.pic.resetCanvasDimensions(canvasWidth, canvasHeight);
    DRAWAPP.pic.redrawAll();
    return false;
    }
window.onresize = onResize;

function reHighlight() {
    if (DRAWAPP.selectedGroupMembers) { // highlight a group
        for (var i= 0 ;i < DRAWAPP.selectedGroupMembers.length ;i++) {
            DRAWAPP.selectedGroupMembers[i].highlight('#0000FF');
            }
        }
    if (DRAWAPP.pickedItem) {
        DRAWAPP.pickedItem.highlight('#FF0000');
        DRAWAPP.handles = DRAWAPP.pickedItem.drawHandles('#0000FF', 8);
        }
    }

// A set of functions to pan and zoom.
// Most of the work takes place in the drawing library but we may need to
// re-highlight selected items.
function appPanLeft() {
    DRAWAPP.pic.panLeft();
    reHighlight();
    }

function appPanRight() {
    DRAWAPP.pic.panRight();
    reHighlight();
    }

function appPanUp() {
    DRAWAPP.pic.panUp();
    reHighlight();
    }

function appPanDown() {
    DRAWAPP.pic.panDown();
    reHighlight();
    }

function appZoomIn() {
    DRAWAPP.pic.zoomIn();
    reHighlight();
    }

function appZoomOut() {
    DRAWAPP.pic.zoomOut();
    reHighlight();
    }

//Copyright (c) 2009-2011, Ian McDowall
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without 
//modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// Methods to manage sets of buttons that need to show one highlighted
// at a time. These are akin to radio buttons but more flexible.

var BUTTAPP = {'sets':{}, 'butts':{}};

function createButtonSet( setName, defClass, setClass, idSet ) {
    // record the set overall and for each button id
    BUTTAPP.sets.setName = {'ids':idSet, 'set':undefined,
                         'defClass':defClass, 'setClass':setClass};
    for (var i = 0 ; i < idSet.length ; i++ ) {
        BUTTAPP.butts[idSet[i]] = setName;
        }
    }

function setButton( idVal ) {
    var setName = BUTTAPP.butts[idVal];
    if (!setName) { return; }
    var set = BUTTAPP.sets[setName];
    if (!set) { return; }
    // Clear the previously set button, if any
    if (set.set) {
        document.getElementById(set.set).
            setAttribute('class', set.defClass);
        }   
    // Mark the set button
    set.set = idVal;
    document.getElementById(idVal).setAttribute('class', set.setClass);
    }

function getButton( setName ) {
    var butt ;
    var set = BUTTAPP[setName];
    if (set.set) { butt = set.set; }
    return butt;
    }

//Copyright (c) 2009-2011, Ian McDowall
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without 
//modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

function hideDiv() {
    if ( !DRAWAPP.shownDiv ) { return; }
    document.getElementById(DRAWAPP.shownDiv).setAttribute("class", "hidden");
    DRAWAPP.shownDiv = '';
    DRAWAPP.modalDialog = false;
    }

function showDiv(id) {
    hideDiv();
    document.getElementById(id).setAttribute("class", "shown");
    DRAWAPP.shownDiv = id;
    DRAWAPP.modalDialog = true;
    }

// Set the styles to be used for drawing new items
function setLineWidth(lineWidth, butId) {
    DRAWAPP.lineWidth = lineWidth;
    setButton(butId);
    }

function setLineStyle(lineStyle, butId) {
    DRAWAPP.lineStyle = lineStyle;
    setButton(butId);
    }

function setFillStyle(fillStyle, butId) {
    DRAWAPP.fillStyle = fillStyle;
    setButton(butId);
    }

function setFontColor(lineStyle, butId) {
    DRAWAPP.fontColor = lineStyle;
    setButton(butId);
    }

function setNewTextSize() {
    DRAWAPP.newTextSize = getIntVal('new_text_size', 10);
    }

// Set the styles to be used for a selected item
function setItemLineWidth(lineWidth, butId) {
    DRAWAPP.itemLineWidth = lineWidth;
    setButton(butId);
    }

function setItemLineStyle(lineStyle, butId) {
    DRAWAPP.itemLineStyle = lineStyle;
    setButton(butId);
    }

function setItemFontColor(lineStyle, butId) {
    DRAWAPP.itemFontColor = lineStyle;
    setButton(butId);
    }

function setItemFillStyle(fillStyle, butId) {
    DRAWAPP.itemFillStyle = fillStyle;
    setButton(butId);
    }

// Remember group break-up settings to apply on save
function setItemDissolveGroup() {
    DRAWAPP.itemDissolveGroup = true; DRAWAPP.itemRemoveFromGroup = false;
    }

function setItemRemoveFromGroup() { DRAWAPP.itemRemoveFromGroup = true; }

//Copyright (c) 2009-2011, Ian McDowall
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without 
//modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

function addRect(midX, midY, winWidth, winHeight, angle){
    var newItemId = DRAWAPP.nextItemId;
    DRAWAPP.nextItemId += 1;
    var newItem = 
        DRAWAPP.pic.createRect( newItemId, midX, midY, winWidth, winHeight,
        angle);
    if(DRAWAPP.fillStyle !== 'none') {
        newItem.setFillStyle(DRAWAPP.fillStyle);
        }
    return newItem;
    }
       
function addCirc(midX, midY, radius, angle){
    var newItemId = DRAWAPP.nextItemId;
    DRAWAPP.nextItemId += 1;
    var newItem=DRAWAPP.pic.createEllipse(newItemId, midX, midY, radius, angle);
    if(DRAWAPP.fillStyle !== 'none') {
        newItem.setFillStyle(DRAWAPP.fillStyle);
        }
    return newItem;
    }

function addFreehand(points){
    var newItemId = DRAWAPP.nextItemId;
    DRAWAPP.nextItemId += 1;
    var newItem = DRAWAPP.pic.createFreehand(newItemId, points);
    return newItem;
    }

function addPolyline(points){
    var newItemId = DRAWAPP.nextItemId;
    DRAWAPP.nextItemId += 1;
    var newItem = DRAWAPP.pic.createPolyline(newItemId, points);
    return newItem;
    }

// This function is called from the 'Save'button on a text dialog
function addText() {
    var newItemId = DRAWAPP.nextItemId;
    DRAWAPP.nextItemId += 1;
    var textVal = document.getElementById("id_body_text").value;
    var angle = parseInt(document.getElementById("text_rotation").value,10);
    var fontSize = parseInt(document.getElementById("text_size").value,10);
    var newItem = DRAWAPP.pic.createText(newItemId,
        DRAWAPP.textXY[0], DRAWAPP.textXY[1],
        textVal, angle, fontSize);
    if (DRAWAPP.itemFontColor) {
        newItem.setFontColorStyle(DRAWAPP.itemFontColor);
        }
    else { newItem.setFontColorStyle(DRAWAPP.fontColor) ; }
    if ( !DRAWAPP.hideTextBox ) {
        newItem.setLineStyle(DRAWAPP.itemLineStyle);
        newItem.setFillStyle(DRAWAPP.itemFillStyle);
        var winWidth =
            parseInt(document.getElementById("text_box_width").value, 10);
        if (winWidth) { newItem.setWidth(winWidth); }
        var winHeight =
            parseInt(document.getElementById("text_box_height").value, 10);
        if (winHeight) { newItem.setHeight(winHeight); }
        }
    newItem.setBoxes();
    hideDiv();
    DRAWAPP.pic.redrawAll();
    }

function addGroup( contained ) {
    var newItemId = DRAWAPP.nextItemId;
    DRAWAPP.nextItemId += 1;
    var newItem = DRAWAPP.pic.createGroupFromPic(newItemId, contained);
    }

// Place a new item on a mouse-up event
function placeItemClick(e) {
    var pic = DRAWAPP.pic;
    var startXY = pic.pageToWindowCoords(DRAWAPP.startX, DRAWAPP.startY);
    var endXY = pic.pageToWindowCoords(e.pageX, e.pageY);
    var midX = Math.floor(0.5+(startXY[0]+endXY[0])/2);
    var midY = Math.floor(0.5+(startXY[1]+endXY[1])/2);
    var winWidth = Math.abs(Math.floor(endXY[0]-startXY[0]+0.5));
    var winHeight = Math.abs(Math.floor(endXY[1]-startXY[1]+0.5));
    var newItem;
    var points = [];
    // Add the specific type of item
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceRect) {
        newItem = addRect( midX, midY, winWidth, winHeight, 0);
        }
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceEllipse) {
        var radius = Math.floor(0.5+Math.min(winWidth, winHeight)/2);
        newItem = addCirc( midX, midY, radius, 0);
        }
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceLine) {
        points = [startXY, endXY];
        newItem = addPolyline(points);
        }
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceFreehand) {
        DRAWAPP.lineSet.push([e.pageX, e.pageY]);
        var len = DRAWAPP.lineSet.length;
        for (var i = 0 ; i < len ; i++ ) {
            var onePoint = 
                pic.pageToWindowCoords(DRAWAPP.lineSet[i][0],
                                       DRAWAPP.lineSet[i][1]);
            points.push(onePoint);
            }
        newItem = addFreehand(points);
        }
    if (DRAWAPP.mouseMode === DRAWAPP.mouseSelectGroup) {
        // Find selected items, if any
        var groupedItems = DRAWAPP.pic.contained(0,
            DRAWAPP.startX, DRAWAPP.startY, e.pageX, e.pageY);
        if (groupedItems.length) {
            addGroup( groupedItems ) ;
            }
        }
    // Don't have the text yet so store the location and bring up a dialog
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceText) {
        DRAWAPP.textXY = pic.pageToWindowCoords(e.pageX, e.pageY);
        DRAWAPP.placeText = true;
        // Prime the Text dialog
        document.getElementById("id_body_text").value = '';
        document.getElementById("text_rotation").value = '0';
        document.getElementById("text_size").value = DRAWAPP.newTextSize;
        setItemLineStyle(''); // Unset
        setItemFillStyle(''); // Unset
        document.getElementById("text_box_div").setAttribute("class", "hidden");
        document.getElementById("text_box_check").checked = false;
        showDiv('text_div');
        document.getElementById('text_z_butt').setAttribute("class", "hidden");
        document.getElementById("id_body_text").focus();
        }
    // Standard actions for (almost) all.
    // Text is one exception because we need to put up a dialog to capture the
    // actual text.
    // Group is the other because it doesn't have line width & colour and is
    // logged separately.
    if ((DRAWAPP.mouseMode !== DRAWAPP.mousePlaceText) &&
        (DRAWAPP.mouseMode !== DRAWAPP.mouseSelectGroup)) {
        newItem.setLineWidth(DRAWAPP.lineWidth);
        newItem.setLineStyle(DRAWAPP.lineStyle);
        DRAWAPP.pic.redrawAll();
        }
    if (DRAWAPP.mouseMode === DRAWAPP.mouseSelectGroup) {
        DRAWAPP.pic.redrawAll();
        }
    }
//Copyright (c) 2009-2011, Ian McDowall
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without 
//modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

function setSizeDialog() { // Show a dialog with the picture size
    document.getElementById("drwg_width").value = DRAWAPP.width;
    document.getElementById("drwg_height").value = DRAWAPP.height;
    showDiv('drawing_admin_div');
    }

function setSize() { // Save new size
    var newWidth = parseInt(document.getElementById("drwg_width").value, 10);
    var newHeight = parseInt(document.getElementById("drwg_height").value, 10);
    DRAWAPP.width = newWidth;
    DRAWAPP.height = newHeight;
    DRAWAPP.pic.setWindowBoundary(0, 0, newWidth, newHeight);
    DRAWAPP.pic.redrawAll();
    hideDiv('drawing_admin_div');
    }

// Not currently used, always white, could be re-added
function setBackground(background) {
    DRAWAPP.background = background;
    DRAWAPP.pic.redrawAll();
    }

// Show a dialog about an item based on type
function setItemDialog(oneItem) {
    var itemType = oneItem.getType();
    DRAWAPP.shownItem = oneItem;
    if (itemType === 'R') { // Rectangle
        document.getElementById("rect_width").value = oneItem.getWidth();
        document.getElementById("rect_height").value = oneItem.getHeight();
        document.getElementById("rect_rotation").value = oneItem.getAngle();
        if (oneItem.getGroup()) {
            document.getElementById("rect_group_p").
                setAttribute("class", "shown");
            }
        else {
            document.getElementById("rect_group_p").
                setAttribute("class", "hidden");
            }
        setButton('rlc'+oneItem.getLineStyle().replace('#',''));
        setButton('rfc'+oneItem.getFillStyle().replace('#',''));
        setButton('rlw'+oneItem.getLineWidth());
        showDiv('rect_div');
        }
    if (itemType === 'C' ) { // Circle
        document.getElementById("circ_radius").value = oneItem.getRadius();
        if (oneItem.getGroup()) {
            document.getElementById("circ_group_p").
                setAttribute("class", "shown");
            }
        else {
            document.getElementById("circ_group_p").
                setAttribute("class", "hidden");
            }
        setButton('clc'+oneItem.getLineStyle().replace('#',''));
        setButton('cfc'+oneItem.getFillStyle().replace('#',''));
        setButton('clw'+oneItem.getLineWidth());
        showDiv('circ_div');
        }
    if ((itemType === 'P') || (itemType === 'F')) { // Line or freehand
        if (oneItem.getGroup()) {
            document.getElementById("poly_group_p").
                setAttribute("class", "shown");
            }
        else {
            document.getElementById("poly_group_p").
                setAttribute("class", "hidden");
            }
        setButton('llc'+oneItem.getLineStyle().replace('#',''));
        setButton('llw'+oneItem.getLineWidth());
        showDiv('poly_div');
        }
    if (itemType === 'T' ) { // Text to edit
        document.getElementById("id_body_text").value = oneItem.getText();
        document.getElementById("text_rotation").value = oneItem.getAngle();
        document.getElementById("text_size").value = oneItem.getFontSize();
        // The text may have an enclosing box or not
        if (oneItem.getFillStyle() || oneItem.getLineStyle()) {
            DRAWAPP.hideTextBox = false;
            document.getElementById("text_box_div").
                setAttribute("class", "shown");
            document.getElementById("text_box_check").checked = true;
            document.getElementById("text_box_width").value = oneItem.getWidth();
            document.getElementById("text_box_height").value =oneItem.getHeight();
            }
        else {
            DRAWAPP.hideTextBox = true;
            document.getElementById("text_box_div").
                setAttribute("class", "hidden");
            document.getElementById("text_box_check").checked = false;
            }
        if (oneItem.getGroup()) {
            document.getElementById("text_group_p").
                setAttribute("class", "shown");
            }
        else {
            document.getElementById("text_group_p").
                setAttribute("class", "hidden");
            }
        setButton('ttc'+oneItem.getFontColorStyle().replace('#',''));
        setButton('tlc'+oneItem.getLineStyle().replace('#',''));
        setButton('tfc'+oneItem.getFillStyle().replace('#',''));
        setButton('tlw'+oneItem.getLineWidth());
        showDiv('text_div');
        document.getElementById('text_z_butt').setAttribute("class", "shown");
        document.getElementById("id_body_text").focus();
        }
    // Unset values ready for buttons to be pressed
    DRAWAPP.itemLineStyle = undefined;
    DRAWAPP.itemFillStyle = undefined;
    DRAWAPP.itemLineWidth = undefined;
    DRAWAPP.itemFontColor = undefined;
    DRAWAPP.itemRemoveFromGroup = false;
    DRAWAPP.itemDissolveGroup = false;
    }

// Function to show or hide the text box fields
function showTextBox(show) {
    if (show) {
        var oneItem = DRAWAPP.shownItem;
        DRAWAPP.hideTextBox = false;
        document.getElementById("text_box_div").setAttribute("class", "shown");
        document.getElementById("text_box_width").value = oneItem.getWidth();
        document.getElementById("text_box_height").value = oneItem.getHeight();
        }
    else {
        DRAWAPP.hideTextBox = true;
        document.getElementById("text_box_div").setAttribute("class", "hidden");
        }
    }

function clickTextBox() {
    showTextBox(document.getElementById('text_box_check').checked);
    }

// Action from the 'Delete' button on an item dialog
// A confirmation might be nice?
function deleteItemFromPage() {
    var oneItem = DRAWAPP.shownItem;
    // Remove from the picture and redraw the item
    DRAWAPP.pic.deleteItem(oneItem.getId());
    DRAWAPP.shownItem = undefined;
    hideDiv();
    DRAWAPP.pic.redrawAll();
    }

// 'Save' from an item dialog
// This comes from an edit dialog, with the possible exception of text where
// we also come via this method to place new text
function saveItemSettings() {
  if (DRAWAPP.placeText) { return addText(); } // Text is placed from the dialog
    var oneItem = DRAWAPP.shownItem;
    var itemType = oneItem.getType();
    // Do common styles
    if (DRAWAPP.itemLineStyle) { oneItem.setLineStyle(DRAWAPP.itemLineStyle); }
    if (DRAWAPP.itemFillStyle) { oneItem.setFillStyle(DRAWAPP.itemFillStyle); }
    if (DRAWAPP.itemLineWidth) { oneItem.setLineWidth(DRAWAPP.itemLineWidth); }
    if (DRAWAPP.itemFontColor) {
        oneItem.setFontColorStyle(DRAWAPP.itemFontColor);
        }
    // Apply item type specific values
    try {
        if (itemType === 'R') { // rectangle
            oneItem.setWidth(
                parseInt(document.getElementById("rect_width").value, 10));
            oneItem.setHeight(
                parseInt(document.getElementById("rect_height").value, 10));
            oneItem.setAngle(
                parseInt(document.getElementById("rect_rotation").value, 10));
            }
        if (itemType === 'C') { // circle
            oneItem.setRadius(
                parseInt(document.getElementById("circ_radius").value, 10));
            }
        if (itemType === 'T') { // text
            oneItem.setText(document.getElementById("id_body_text").value);
            oneItem.setAngle(
                parseInt(document.getElementById("text_rotation").value, 10));
            oneItem.setFontSize(
                parseInt(document.getElementById("text_size").value, 10));
            if ( DRAWAPP.hideTextBox ) { // Override values
                oneItem.setLineStyle('');
                oneItem.setFillStyle('');
                }
            else { // Set from either recent ones or defaults
                // May already be set but may need to default
                if (DRAWAPP.itemLineStyle) {
                    oneItem.setLineStyle(DRAWAPP.itemLineStyle);
                    }
                else { if (!oneItem.getLineStyle()) {
                    oneItem.setLineStyle(DRAWAPP.lineStyle);
                    } }
                if (DRAWAPP.itemFillStyle) {
                    oneItem.setFillStyle(DRAWAPP.itemFillStyle);
                    }
                else { if (!oneItem.getFillStyle()) {
                    oneItem.setFillStyle(DRAWAPP.fillStyle);
                    } }
                var winWidth =
                    parseInt(document.getElementById("text_box_width").value,10);
                if (winWidth) { oneItem.setWidth(winWidth); }
                var winHeight =
                    parseInt(document.getElementById("text_box_height").value,10);
                if (winHeight) { oneItem.setHeight(winHeight); }
                }
            }
        // Polyline and freehand don't have specific attributes
        }
    catch(err) { // Don't think this can happen any more
        alert('Invalid value(s)');
        return;
        }
    // Do common group handling
    var oneGroup;
    if (DRAWAPP.itemDissolveGroup) {
        oneGroup = oneItem.getGroup();
        if (oneGroup) {
            oneGroup.clear(); // Inform all group members
            DRAWAPP.selectedGroup = undefined; // Group no longer selected
            DRAWAPP.selectedGroupMembers = undefined;
            }
        }
    else {
        if (DRAWAPP.itemRemoveFromGroup) { 
            oneGroup = oneItem.getGroup();
            if (oneGroup) {
                oneGroup.removeMember( oneItem );
                DRAWAPP.selectedGroup = undefined; // Group no longer selected
                DRAWAPP.selectedGroupMembers = undefined;
                }
            }
        }
    // Extend re-draw area if necessary
    oneItem.setBoxes();
    DRAWAPP.shownItem = undefined;
    hideDiv();
    DRAWAPP.pic.redrawAll();
    reHighlight();
    }

// Move Z position relative to current value
function setZRel(direction) {
    var oneItem = DRAWAPP.shownItem;
    oneItem.setZ(oneItem.getZ() + direction);
    DRAWAPP.pic.redrawAll();
    reHighlight();
    }

// Move Z position in absolute terms
function setZAbs(direction) {
    if (direction < 0) { DRAWAPP.shownItem.setZ(DRAWAPP.pic.getMinZ()-1); }
    if (direction > 0) { DRAWAPP.shownItem.setZ(DRAWAPP.pic.getMaxZ()+1); }
    DRAWAPP.pic.redrawAll();
    reHighlight();
    }
//Copyright (c) 2009-2011, Ian McDowall
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without 
//modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// Mouse modes - constants
DRAWAPP.mouseSelect = 0;  // Select an item, don't placeone
DRAWAPP.mousePlaceRect = 1; // Place a rectangle
DRAWAPP.mousePlaceEllipse = 2; // Place an ellipse
DRAWAPP.mousePlacePoly = 3; // Place a polyline
DRAWAPP.mousePlaceLine = 4; // Place a line
DRAWAPP.mousePlaceFreehand = 5; // Place a freehand line
DRAWAPP.mousePlaceText = 6; // Place text
DRAWAPP.mouseSelectGroup = 7; // Rectangle to create group

// Collection of information for each mouse mode
// Indexed by numeric mouse mode, then:
//   id of selection button (to highlight)
DRAWAPP.mouseModeData = {
    '0': { 'bid':'select_button' },
    '1': { 'bid':'rect_button' },
    '2': { 'bid':'circ_button' },
    '3': { 'bid':'rect_button' },
    '4': { 'bid':'line_button' },
    '5': { 'bid':'freehand_button' },
    '6': { 'bid':'text_button' },
    '7': { 'bid':'group_button' }
    };

function clearHighlights() {
    if (DRAWAPP.pickedItem) {
        DRAWAPP.pickedItem = undefined;
        DRAWAPP.handles = undefined;
        DRAWAPP.selectedGroup = undefined;
        DRAWAPP.selectedGroupMembers = undefined;
        DRAWAPP.pic.redrawAll();
        }
    }

function setMouseMode(modeVal) {
    DRAWAPP.placeText = false;
    DRAWAPP.mouseMode = modeVal;
    clearHighlights();
    var modeData = DRAWAPP.mouseModeData[''+modeVal];
    setButton(modeData.bid);
    }

//====================================================================
// Mouse methods for select mode
//
// on mousedown
// if dialog shown then do nothing
// - if item already selected, compare point to handles, if handle selected
//   then record it
// - if item selected, check still picked;
//     if not then un-highlight (redarw all)
//
// on mousemove
// if dialog shown then do nothing
// - if handle selected the drag a handle
// - if no handle selected then drag the item
//
// on mouseup
// if dialog shown then do nothing
// - if dragging item then offset
// - if dragging handle then stretch
// - if not dragging and item selected and first click then highlight and
//   draw handles and unset first click
// - if not dragging and item still selected and not first click then raise
//   edit dialog

function mouseDownSelect(e) {
    if (DRAWAPP.editDialogShown) { return; }
    var i;
    DRAWAPP.handleSelected = -1;
    if (DRAWAPP.pickedItem) {
        // Check for a handle being selected
        var cP = DRAWAPP.pic.pageToCanvasCoords(e.pageX, e.pageY);
        for( i = 0 ; i < 8 ; i++) {
            if((Math.abs(cP[0]-DRAWAPP.handles[i][0]) < 4) &&
               (Math.abs(cP[1]-DRAWAPP.handles[i][1]) < 4)) {
                DRAWAPP.handleSelected = i;
                DRAWAPP.selected = true;
                DRAWAPP.pickedItem.setDrag(true);
                break;
                }
            }
        if (DRAWAPP.handleSelected >= 0) { return; }
        
        // Check if the same item has been selected, if not then
        // unset it
        if (DRAWAPP.pic.checkPickItem(e.pageX, e.pageY, DRAWAPP.pickedItem)) {
            DRAWAPP.selected = true;
            DRAWAPP.pickedItem.setDrag(true);
            }
        else {
            DRAWAPP.pickedItem = undefined;
            DRAWAPP.selectedGroupMembers = undefined;
            DRAWAPP.selectedGroup = 0;
            DRAWAPP.pic.redrawAll();
            }
        }
    // We are not picking the existing item
    // Check for a new item picked
    if (!DRAWAPP.pickedItem) {
        var pickedItem = DRAWAPP.pic.pick(e.pageX, e.pageY);
        if (pickedItem) {
            pickedItem.setDrag(true);
            DRAWAPP.selected = true;
            DRAWAPP.itemFirstClick = true;
            DRAWAPP.pickedItem = pickedItem;
            DRAWAPP.selectedGroup = pickedItem.getGroup();
            if ( DRAWAPP.selectedGroup ) {
                DRAWAPP.selectedGroupMembers =
                    DRAWAPP.selectedGroup.getMembers();
                for ( i= 0 ; i < DRAWAPP.selectedGroupMembers.length ; i++) {
                    DRAWAPP.selectedGroupMembers[i].setDrag(true);
                    }
                }
            }
        }
    }

function mouseMoveSelect(e) {
    if (DRAWAPP.editDialogShown) { return; }
    if (!DRAWAPP.pickedItem) { return; }
    if (DRAWAPP.handleSelected >= 0) { // Drag a handle
        DRAWAPP.pickedItem.drawStretch( DRAWAPP.handleSelected,
            DRAWAPP.lastPoint[0]-DRAWAPP.startX,
            DRAWAPP.lastPoint[1]-DRAWAPP.startY,
            e.pageX-DRAWAPP.startX, e.pageY-DRAWAPP.startY, true);
        }
    else {
        if (DRAWAPP.selectedGroupMembers) { // Drag a group
            DRAWAPP.selectedGroup.drawOffset(
                DRAWAPP.lastPoint[0]-DRAWAPP.startX,
                DRAWAPP.lastPoint[1]-DRAWAPP.startY,
                e.pageX-DRAWAPP.startX, e.pageY-DRAWAPP.startY, true);
            }
        else { // Drag a single element
            DRAWAPP.pickedItem.drawOffset(
                DRAWAPP.lastPoint[0]-DRAWAPP.startX,
                DRAWAPP.lastPoint[1]-DRAWAPP.startY,
                e.pageX-DRAWAPP.startX, e.pageY-DRAWAPP.startY, true);
            }
        }
    }

function mouseUpSelect(e) {
    if (DRAWAPP.editDialogShown) { return; }
    if (!DRAWAPP.pickedItem) { return; }
    var item = DRAWAPP.pickedItem;
    item.setDrag(false);
    if (DRAWAPP.hasDragged) { // Drag the selected item(s)
        var movedX = e.pageX - DRAWAPP.startX;
        var movedY = e.pageY - DRAWAPP.startY;
        var xOffset = DRAWAPP.pic.pageToWindowDistance(movedX);
        var yOffset = DRAWAPP.pic.pageToWindowDistance(movedY);

        if (DRAWAPP.handleSelected >= 0) { // Drag a handle
            item.stretch(DRAWAPP.handleSelected, xOffset, yOffset);
            }
        else {
            if (DRAWAPP.selectedGroupMembers) { // Drag a group
                for (var i= 0 ;i < DRAWAPP.selectedGroupMembers.length ;i++) {
                    var oneItem = DRAWAPP.selectedGroupMembers[i];
                    oneItem.offset(xOffset, yOffset);
                    oneItem.setDrag(false);
                    }
                }
            else { // Drag a single item
                item.offset(xOffset, yOffset);
                }
            }

        DRAWAPP.pic.redrawAll();
        reHighlight();
        }
    // if not dragging and not first click then put up an edit dialog
    if ((!DRAWAPP.hasDragged) && (!DRAWAPP.itemFirstClick)) {
        DRAWAPP.selected = false;
        setItemDialog(item);
        }
    // If not dragging and first click then highlight the picked item
    if (!DRAWAPP.hasDragged && DRAWAPP.itemFirstClick) {
        reHighlight();
        DRAWAPP.itemFirstClick = false;
        }
    DRAWAPP.selected = false;
    }

//====================================================================
function mouseDown(e) {
    if (DRAWAPP.modalDialog) { return; }
    DRAWAPP.mouseIsDown = true;
    DRAWAPP.hasDragged = false;
    DRAWAPP.startX = e.pageX;
    DRAWAPP.startY = e.pageY;
    DRAWAPP.lastPoint = [e.pageX, e.pageY];
    if (DRAWAPP.mouseMode === DRAWAPP.mouseSelect) {
        mouseDownSelect(e);
        }
    if ((DRAWAPP.mouseMode === DRAWAPP.mousePlaceRect) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlaceEllipse) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlacePoly) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlaceLine) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlaceFreehand) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlaceText) ||
        (DRAWAPP.mouseMode === DRAWAPP.mouseSelectGroup)) {
        DRAWAPP.lineSet = [];
        // Don't do anything yet, will start drawing a box under mouseMove
        }
    }

function mouseMove(e) {
    if (DRAWAPP.modalDialog) { return; }
    DRAWAPP.hasDragged = true;
    // Dragging one or more items
    if ((DRAWAPP.mouseMode === DRAWAPP.mouseSelect) && DRAWAPP.selected) {
        mouseMoveSelect(e);
        }
    // Draw rectangle before selecting group
    if (DRAWAPP.mouseMode === DRAWAPP.mouseSelectGroup) {
        if(DRAWAPP.mouseIsDown) {
            DRAWAPP.pic.drawDragRect(DRAWAPP.startX, DRAWAPP.startY,
                DRAWAPP.lastPoint[0], DRAWAPP.lastPoint[1], e.pageX, e.pageY,
                '#A0A0A0');
            }
        }
    // Dynamically draw rectangle
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceRect) {
        if(DRAWAPP.mouseIsDown) {
            DRAWAPP.pic.drawDragRect(DRAWAPP.startX, DRAWAPP.startY,
                DRAWAPP.lastPoint[0], DRAWAPP.lastPoint[1], e.pageX, e.pageY,
                DRAWAPP.lineStyle);
            }
        }
    // Dynamically draw ellipse
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceEllipse) {
        if(DRAWAPP.mouseIsDown) {
            DRAWAPP.pic.drawDragEllipse(DRAWAPP.startX, DRAWAPP.startY,
                DRAWAPP.lastPoint[0], DRAWAPP.lastPoint[1], e.pageX, e.pageY,
                DRAWAPP.lineStyle);
            }
        }
    // Dynamically draw line
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceLine) {
        if(DRAWAPP.mouseIsDown) {
            DRAWAPP.pic.redrawSectionPage(DRAWAPP.startX, DRAWAPP.startY,
                DRAWAPP.lastPoint[0], DRAWAPP.lastPoint[1]);
            DRAWAPP.pic.drawPageLine(DRAWAPP.startX, DRAWAPP.startY,
                e.pageX, e.pageY, DRAWAPP.lineStyle, DRAWAPP.lineWidth);
            }
        }
    // Dynamically draw freehand
    if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceFreehand) {
        if(DRAWAPP.mouseIsDown) {
            DRAWAPP.lineSet.push([e.pageX, e.pageY]);
            DRAWAPP.pic.drawPageLine(
                DRAWAPP.lastPoint[0], DRAWAPP.lastPoint[1],
                e.pageX, e.pageY, DRAWAPP.lineStyle, DRAWAPP.lineWidth);
            }
        }
    // Dynamically draw text
    //if (DRAWAPP.mouseMode === DRAWAPP.mousePlaceText) {
    //    if(DRAWAPP.mouseIsDown) { // nothing, just use final point
    //        }
    //    }
    DRAWAPP.lastPoint = [e.pageX, e.pageY];
    }

function mouseUp(e) {
    if (DRAWAPP.modalDialog) { return; }
    // Drag or edit an item
    if ((DRAWAPP.mouseMode === DRAWAPP.mouseSelect) && DRAWAPP.selected) {
        mouseUpSelect(e);
        }
    // Place an item
    if ((DRAWAPP.mouseMode === DRAWAPP.mousePlaceRect) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlaceEllipse) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlacePoly) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlaceLine) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlaceFreehand) ||
        (DRAWAPP.mouseMode === DRAWAPP.mousePlaceText) ||
        (DRAWAPP.mouseMode === DRAWAPP.mouseSelectGroup)) {
        DRAWAPP.mouseIsDown = false;
        placeItemClick(e);
        }
    DRAWAPP.mouseIsDown = false;
    }

//Copyright (c) 2009-2011, Ian McDowall
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without 
//modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

function CreateAllButtonSets() {
    // Mouse mode buttons
    createButtonSet( 'mm', 'btn', 'setbtn',
        ['rect_button', 'circ_button', 'line_button', 'freehand_button', 
         'text_button', 'select_button', 'group_button']);

    // Rectangle Item Dialog
    // rectangle dialog line colours
    createButtonSet( 'rlc', 'btn', 'setbtn',
        ['rlc000000', 'rlcFF0000', 'rlc00FF00', 'rlc0000FF', 'rlc00FFFF',
         'rlcFF00FF', 'rlcFFFF00', 'rlcFFFFFF']);
    // rectangle dialog line widths
    createButtonSet( 'rlw', 'btn', 'setbtn',
        ['rlw1', 'rlw2', 'rlw3', 'rlw5']);
    // rectangle dialog fill colours
    createButtonSet( 'rfc', 'btn', 'setbtn',
        ['rfc000000', 'rfcFF0000', 'rfc00FF00', 'rfc0000FF', 'rfc00FFFF',
         'rfcFF00FF', 'rfcFFFF00', 'rfcFFFFFF','rfc']);

    // Circle Item Dialog
    // circle dialog line colours
    createButtonSet( 'clc', 'btn', 'setbtn',
        ['clc000000', 'clcFF0000', 'clc00FF00', 'clc0000FF', 'clc00FFFF',
         'clcFF00FF', 'clcFFFF00', 'clcFFFFFF']);
    // circle dialog line widths
    createButtonSet( 'clw', 'btn', 'setbtn',
        ['clw1', 'clw2', 'clw3', 'clw5']);
    // circle dialog fill colours
    createButtonSet( 'cfc', 'btn', 'setbtn',
        ['cfc000000', 'cfcFF0000', 'cfc00FF00', 'cfc0000FF', 'cfc00FFFF',
         'cfcFF00FF', 'cfcFFFF00', 'cfcFFFFFF','cfc']);

    // Line Item Dialog
    // line dialog line colours
    createButtonSet( 'llc', 'btn', 'setbtn',
        ['llc000000', 'llcFF0000', 'llc00FF00', 'llc0000FF', 'llc00FFFF',
         'llcFF00FF', 'llcFFFF00', 'llcFFFFFF']);
    // line dialog line widths
    createButtonSet( 'llw', 'btn', 'setbtn',
        ['llw1', 'llw2', 'llw3', 'llw5']);

    // Text Item Dialog
    // text dialog text colours
    createButtonSet( 'ttc', 'btn', 'setbtn',
        ['ttc000000', 'ttcFF0000', 'ttc00FF00', 'ttc0000FF', 'ttc00FFFF',
         'ttcFF00FF', 'ttcFFFF00', 'ttcFFFFFF']);
    // text dialog line colours
    createButtonSet( 'tlc', 'btn', 'setbtn',
        ['tlc000000', 'tlcFF0000', 'tlc00FF00', 'tlc0000FF', 'tlc00FFFF',
         'tlcFF00FF', 'tlcFFFF00', 'tlcFFFFFF']);
    // text dialog line widths
    createButtonSet( 'tlw', 'btn', 'setbtn',
        ['tlw1', 'tlw2', 'tlw3', 'tlw5']);
    // text dialog fill colours
    createButtonSet( 'tfc', 'btn', 'setbtn',
        ['tfc000000', 'tfcFF0000', 'tfc00FF00', 'tfc0000FF', 'tfc00FFFF',
         'tfcFF00FF', 'tfcFFFF00', 'tfcFFFFFF','tfc']);

    // New Items Dialog
    // new item line colours
    createButtonSet( 'nlc', 'btn', 'setbtn',
        ['nlc000000', 'nlcFF0000', 'nlc00FF00', 'nlc0000FF', 'nlc00FFFF',
         'nlcFF00FF', 'nlcFFFF00', 'nlcFFFFFF']);
    // new item line widths
    createButtonSet( 'nlw', 'btn', 'setbtn',
        ['nlw1', 'nlw2', 'nlw3', 'nlw5']);
    // new item fill colours
    createButtonSet( 'nfc', 'btn', 'setbtn',
        ['nfc000000', 'nfcFF0000', 'nfc00FF00', 'nfc0000FF', 'nfc00FFFF',
         'nfcFF00FF', 'nfcFFFF00', 'nfcFFFFFF','nfc']);
    // new item text colours
    createButtonSet( 'ntc', 'btn', 'setbtn',
        ['ntc000000', 'ntcFF0000', 'ntc00FF00', 'ntc0000FF', 'ntc00FFFF',
         'ntcFF00FF', 'ntcFFFF00', 'ntcFFFFFF']);
    }

function setDrawing( width, height, background) {
    DRAWAPP.width = width;
    DRAWAPP.height = height;
    DRAWAPP.background = background;
    DRAWAPP.canvas = document.getElementById("drawing_canvas");
    DRAWAPP.pic = DRAWLIB.createPicture(DRAWAPP.canvas, background);
    DRAWAPP.canvas.onmousedown = mouseDown;
    DRAWAPP.canvas.onmousemove = mouseMove;
    DRAWAPP.canvas.onmouseup = mouseUp;
    DRAWAPP.mouseIsDown = false;
    DRAWAPP.editDialogShown = false;
    DRAWAPP.itemFirstClick = false;
    DRAWAPP.selected = false;
    DRAWAPP.pickedItem = undefined;
    DRAWAPP.handleSelected = -1;
    CreateAllButtonSets();
    setMouseMode(0);
    onResize();
    DRAWAPP.pic.setWindow(0, 0, width, height);
    DRAWAPP.pic.setWindowBoundary(0, 0, width, height);
    DRAWAPP.pic.redrawAll();
    }

function initDrawing() {
    DRAWAPP.lineWidth = 1;
    DRAWAPP.lineStyle = '#000000';
    DRAWAPP.fontColor = '#000000';
    DRAWAPP.fillStyle = '';
    DRAWAPP.newTextSize = '10';
    document.getElementById('new_text_size').value = DRAWAPP.newTextSize;
    DRAWAPP.canvasSize = 1000;
    setDrawing( 1000, 1000, "#FFFFFF");
    onResize();
    }

